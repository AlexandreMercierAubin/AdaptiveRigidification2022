/* mexCorotational3D.c - computes negative area weighted Corotational dpsidF and d2psidF2
 *
 * [ ii, jj, Cvals, dpsidF ] = mexCorotational3D( F, V, mu, lambda );
 *
 * Input:
 *  F        9x#E deformation gradient of each element (or a vector of size 9x#E)
 *  V        #E volume of each element
 *  mu       #E Lamé parameter of each element
 *  lambda   #E Lamé parameter of each element
 * 
 * Output:
 *  ii         81x#E by 1 row indices for each C block in a sparse matrix
 *  jj         81x#E by 1 col indices for each C block in a sparse matrix
 *  Cvals      81x#E by 1 energy Hessian wrt F for each eleemnt (scaled by negative volume)
 *  dpsidF     9x#E by 1 energy gradient (scaled by negative volume)
 *
 * To compile type: mex -R2018a mexCorotational3D.cpp
 *
 * Notes:
 *
 * Code generated by codegen code
 *
 * It is perhaps a tiny bit slower to build the sparse matrix with the 
 * matlab call sparse( ii, jj, Cvals ), rather than creating it here, but 
 * it could also be more useful in the long run to have the non-sparse 
 * version of the Cvals (e.g., a custom non-assembled matrix multiply for
 * the quick solve conjugate gradient).
 *========================================================*/

#include "mex.h"
#include "blas.h"

/* 
 * The gateway function
 */
void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[] ) {
    // check for proper number of arguments
    if ( nrhs != 4 ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:nrhs","four inputs required.");
    }
    if ( nlhs != 5 ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:nlhs","five outputs required.");
    }
    
    // make sure the arguments are dense real double
    if ( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) || mxIsSparse(prhs[0]) ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
    if ( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) || mxIsSparse(prhs[1]) ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
    if ( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) || mxIsSparse(prhs[2]) ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
    if ( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) || mxIsSparse(prhs[3]) ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:mustBeDenseRealDouble","Parameters must be dense real double.");
    }

    // check sizes    
    size_t Fsize = mxGetNumberOfElements(prhs[0]); // number of rows 
    if ( Fsize % 9 != 0 ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:FSize","F must be a multiple of 9.");
    }
    size_t m = Fsize / 9;
    if ( mxGetNumberOfElements(prhs[1]) != m || mxGetNumberOfElements(prhs[2]) != m || mxGetNumberOfElements(prhs[3]) != m ) {
        mexErrMsgIdAndTxt("ARP:mexCompute3DSTVKGradHess:RowSize","All inputs must have same number of rows.");
    }
     
    double *FVals = mxGetDoubles(prhs[0]);
    double *VVals = mxGetDoubles(prhs[1]);
    double *muVals = mxGetDoubles(prhs[2]);
    double *lambdaVals = mxGetDoubles(prhs[3]);
    
    // create the output vectors 
    plhs[0] = mxCreateDoubleMatrix( 81*m, 1, mxREAL );
    double *ii = mxGetDoubles(plhs[0]);
    plhs[1] = mxCreateDoubleMatrix( 81*m, 1, mxREAL );
    double *jj = mxGetDoubles(plhs[1]);
    plhs[2] = mxCreateDoubleMatrix( 81*m, 1, mxREAL );
    double *C = mxGetDoubles(plhs[2]);
    plhs[3] = mxCreateDoubleMatrix( 9*m, 1, mxREAL );
    double *dpsidF = mxGetDoubles(plhs[3]);
    plhs[4] = mxCreateDoubleMatrix( m, 1, mxREAL );
    double *psi = mxGetDoubles(plhs[4]);
    
    size_t i = 0;
    size_t j = 0;
    for ( int el = 0; el < m; el++ ) {
        double volume = VVals[el];
        double mu = muVals[el];
        double lambda = lambdaVals[el];
        double F1_1 = FVals[j++];
        double F2_1 = FVals[j++];
        double F3_1 = FVals[j++];
        double F1_2 = FVals[j++];
        double F2_2 = FVals[j++];
        double F3_2 = FVals[j++];
        double F1_3 = FVals[j++];
        double F2_3 = FVals[j++];
        double F3_3 = FVals[j++];
        
        // code gen from scratch/codeGenSTVKHessian3D.m
        double t2 = F1_1*F1_1;
        double t3 = F1_1*F1_1*F1_1;
        double t4 = F1_2*F1_2;
        double t6 = F1_2*F1_2*F1_2;
        double t7 = F1_3*F1_3;
        double t9 = F1_3*F1_3*F1_3;
        double t11 = F2_1*F2_1;
        double t12 = F2_1*F2_1*F2_1;
        double t13 = F2_2*F2_2;
        double t15 = F2_2*F2_2*F2_2;
        double t16 = F2_3*F2_3;
        double t18 = F2_3*F2_3*F2_3;
        double t20 = F3_1*F3_1;
        double t21 = F3_1*F3_1*F3_1;
        double t22 = F3_2*F3_2;
        double t24 = F3_2*F3_2*F3_2;
        double t25 = F3_3*F3_3;
        double t27 = F3_3*F3_3*F3_3;
        double t29 = lambda*6.0;
        double t30 = mu*4.0;
        double t33 = F1_1*F1_2*lambda*4.0;
        double t34 = F1_1*F1_3*lambda*4.0;
        double t35 = F1_2*F1_3*lambda*4.0;
        double t36 = F1_1*F2_1*lambda*4.0;
        double t37 = F1_1*F2_2*lambda*4.0;
        double t38 = F1_2*F2_1*lambda*4.0;
        double t39 = F1_1*F2_3*lambda*4.0;
        double t40 = F1_2*F2_2*lambda*4.0;
        double t41 = F1_3*F2_1*lambda*4.0;
        double t42 = F1_2*F2_3*lambda*4.0;
        double t43 = F1_3*F2_2*lambda*4.0;
        double t44 = F1_3*F2_3*lambda*4.0;
        double t45 = F1_1*F3_1*lambda*4.0;
        double t46 = F1_1*F3_2*lambda*4.0;
        double t47 = F1_2*F3_1*lambda*4.0;
        double t48 = F2_1*F2_2*lambda*4.0;
        double t49 = F1_1*F3_3*lambda*4.0;
        double t50 = F1_2*F3_2*lambda*4.0;
        double t51 = F1_3*F3_1*lambda*4.0;
        double t52 = F2_1*F2_3*lambda*4.0;
        double t53 = F1_2*F3_3*lambda*4.0;
        double t54 = F1_3*F3_2*lambda*4.0;
        double t55 = F2_2*F2_3*lambda*4.0;
        double t56 = F1_3*F3_3*lambda*4.0;
        double t57 = F2_1*F3_1*lambda*4.0;
        double t58 = F2_1*F3_2*lambda*4.0;
        double t59 = F2_2*F3_1*lambda*4.0;
        double t60 = F2_1*F3_3*lambda*4.0;
        double t61 = F2_2*F3_2*lambda*4.0;
        double t62 = F2_3*F3_1*lambda*4.0;
        double t63 = F2_2*F3_3*lambda*4.0;
        double t64 = F2_3*F3_2*lambda*4.0;
        double t65 = F2_3*F3_3*lambda*4.0;
        double t66 = F3_1*F3_2*lambda*4.0;
        double t67 = F3_1*F3_3*lambda*4.0;
        double t68 = F3_2*F3_3*lambda*4.0;
        double t105 = F1_1*F1_2*mu*8.0;
        double t106 = F1_1*F1_3*mu*8.0;
        double t107 = F1_2*F1_3*mu*8.0;
        double t108 = F1_1*F2_1*mu*8.0;
        double t109 = F1_2*F2_2*mu*8.0;
        double t110 = F1_3*F2_3*mu*8.0;
        double t111 = F1_1*F3_1*mu*8.0;
        double t112 = F2_1*F2_2*mu*8.0;
        double t113 = F1_2*F3_2*mu*8.0;
        double t114 = F2_1*F2_3*mu*8.0;
        double t115 = F2_2*F2_3*mu*8.0;
        double t116 = F1_3*F3_3*mu*8.0;
        double t117 = F2_1*F3_1*mu*8.0;
        double t118 = F2_2*F3_2*mu*8.0;
        double t119 = F2_3*F3_3*mu*8.0;
        double t120 = F3_1*F3_2*mu*8.0;
        double t121 = F3_1*F3_3*mu*8.0;
        double t122 = F3_2*F3_3*mu*8.0;
        double t5 = t2*t2;
        double t8 = t4*t4;
        double t10 = t7*t7;
        double t14 = t11*t11;
        double t17 = t13*t13;
        double t19 = t16*t16;
        double t23 = t20*t20;
        double t26 = t22*t22;
        double t28 = t25*t25;
        double t31 = -t29;
        double t32 = -t30;
        double t69 = F1_1*F1_2*t30;
        double t70 = F1_1*F1_3*t30;
        double t71 = F1_2*F1_3*t30;
        double t72 = F1_1*F2_1*t30;
        double t73 = F1_1*F2_2*t30;
        double t74 = F1_2*F2_1*t30;
        double t75 = F1_1*F2_3*t30;
        double t76 = F1_2*F2_2*t30;
        double t77 = F1_3*F2_1*t30;
        double t78 = F1_2*F2_3*t30;
        double t79 = F1_3*F2_2*t30;
        double t80 = F1_3*F2_3*t30;
        double t81 = F1_1*F3_1*t30;
        double t82 = F1_1*F3_2*t30;
        double t83 = F1_2*F3_1*t30;
        double t84 = F2_1*F2_2*t30;
        double t85 = F1_1*F3_3*t30;
        double t86 = F1_2*F3_2*t30;
        double t87 = F1_3*F3_1*t30;
        double t88 = F2_1*F2_3*t30;
        double t89 = F1_2*F3_3*t30;
        double t90 = F1_3*F3_2*t30;
        double t91 = F2_2*F2_3*t30;
        double t92 = F1_3*F3_3*t30;
        double t93 = F2_1*F3_1*t30;
        double t94 = F2_1*F3_2*t30;
        double t95 = F2_2*F3_1*t30;
        double t96 = F2_1*F3_3*t30;
        double t97 = F2_2*F3_2*t30;
        double t98 = F2_3*F3_1*t30;
        double t99 = F2_2*F3_3*t30;
        double t100 = F2_3*F3_2*t30;
        double t101 = F2_3*F3_3*t30;
        double t102 = F3_1*F3_2*t30;
        double t103 = F3_1*F3_3*t30;
        double t104 = F3_2*F3_3*t30;
        double t123 = lambda*t2*2.0;
        double t124 = lambda*t4*2.0;
        double t125 = lambda*t7*2.0;
        double t126 = lambda*t11*2.0;
        double t127 = lambda*t13*2.0;
        double t128 = lambda*t16*2.0;
        double t129 = lambda*t20*2.0;
        double t130 = lambda*t22*2.0;
        double t131 = lambda*t25*2.0;
        double t132 = t2*t30;
        double t133 = t4*t30;
        double t134 = t7*t30;
        double t135 = t11*t30;
        double t136 = t13*t30;
        double t137 = t16*t30;
        double t138 = t20*t30;
        double t139 = t22*t30;
        double t140 = t25*t30;
        double t141 = t37+t74;
        double t142 = t38+t73;
        double t143 = t39+t77;
        double t144 = t41+t75;
        double t145 = t42+t79;
        double t146 = t43+t78;
        double t147 = t46+t83;
        double t148 = t47+t82;
        double t149 = t49+t87;
        double t150 = t51+t85;
        double t151 = t53+t90;
        double t152 = t54+t89;
        double t153 = t58+t95;
        double t154 = t59+t94;
        double t155 = t60+t98;
        double t156 = t62+t96;
        double t157 = t63+t100;
        double t158 = t64+t99;
        double t195 = t36+t76+t80+t108;
        double t196 = t40+t72+t80+t109;
        double t197 = t44+t72+t76+t110;
        double t198 = t33+t84+t102+t105;
        double t199 = t34+t88+t103+t106;
        double t200 = t35+t91+t104+t107;
        double t201 = t48+t69+t102+t112;
        double t202 = t45+t86+t92+t111;
        double t203 = t50+t81+t92+t113;
        double t204 = t52+t70+t103+t114;
        double t205 = t56+t81+t86+t116;
        double t206 = t55+t71+t104+t115;
        double t207 = t66+t69+t84+t120;
        double t208 = t67+t70+t88+t121;
        double t209 = t68+t71+t91+t122;
        double t210 = t57+t97+t101+t117;
        double t211 = t61+t93+t101+t118;
        double t212 = t65+t93+t97+t119;
        double t159 = t141*volume;
        double t160 = t142*volume;
        double t161 = t143*volume;
        double t162 = t144*volume;
        double t163 = t145*volume;
        double t164 = t146*volume;
        double t165 = t147*volume;
        double t166 = t148*volume;
        double t167 = t149*volume;
        double t168 = t150*volume;
        double t169 = t151*volume;
        double t170 = t152*volume;
        double t171 = t153*volume;
        double t172 = t154*volume;
        double t173 = t155*volume;
        double t174 = t156*volume;
        double t175 = t157*volume;
        double t176 = t158*volume;
        double t213 = t195*volume;
        double t214 = t196*volume;
        double t215 = t197*volume;
        double t216 = t198*volume;
        double t217 = t199*volume;
        double t218 = t200*volume;
        double t219 = t201*volume;
        double t220 = t202*volume;
        double t221 = t203*volume;
        double t222 = t204*volume;
        double t223 = t205*volume;
        double t224 = t206*volume;
        double t225 = t207*volume;
        double t226 = t208*volume;
        double t227 = t209*volume;
        double t228 = t210*volume;
        double t229 = t211*volume;
        double t230 = t212*volume;
        double t177 = -t159;
        double t178 = -t160;
        double t179 = -t161;
        double t180 = -t162;
        double t181 = -t163;
        double t182 = -t164;
        double t183 = -t165;
        double t184 = -t166;
        double t185 = -t167;
        double t186 = -t168;
        double t187 = -t169;
        double t188 = -t170;
        double t189 = -t171;
        double t190 = -t172;
        double t191 = -t173;
        double t192 = -t174;
        double t193 = -t175;
        double t194 = -t176;
        double t231 = -t213;
        double t232 = -t214;
        double t233 = -t215;
        double t234 = -t216;
        double t235 = -t217;
        double t236 = -t218;
        double t237 = -t219;
        double t238 = -t220;
        double t239 = -t221;
        double t240 = -t222;
        double t241 = -t223;
        double t242 = -t224;
        double t243 = -t225;
        double t244 = -t226;
        double t245 = -t227;
        double t246 = -t228;
        double t247 = -t229;
        double t248 = -t230;
        C[i++] = -volume*(t31+t32+t124+t125+t126+t127+t128+t129+t130+t131+t133+t134+t135+t138+mu*t2*1.2E+1+t2*t29);
        C[i++] = t231;
        C[i++] = t238;
        C[i++] = t234;
        C[i++] = t177;
        C[i++] = t183;
        C[i++] = t235;
        C[i++] = t179;
        C[i++] = t185;
        C[i++] = t231;
        C[i++] = -volume*(t31+t32+t123+t124+t125+t127+t128+t129+t130+t131+t132+t136+t137+t138+mu*t11*1.2E+1+t11*t29);
        C[i++] = t246;
        C[i++] = t178;
        C[i++] = t237;
        C[i++] = t189;
        C[i++] = t180;
        C[i++] = t240;
        C[i++] = t191;
        C[i++] = t238;
        C[i++] = t246;
        C[i++] = -volume*(t31+t32+t123+t124+t125+t126+t127+t128+t130+t131+t132+t135+t139+t140+mu*t20*1.2E+1+t20*t29);
        C[i++] = t184;
        C[i++] = t190;
        C[i++] = t243;
        C[i++] = t186;
        C[i++] = t192;
        C[i++] = t244;
        C[i++] = t234;
        C[i++] = t178;
        C[i++] = t184;
        C[i++] = -volume*(t31+t32+t123+t125+t126+t127+t128+t129+t130+t131+t132+t134+t136+t139+mu*t4*1.2E+1+t4*t29);
        C[i++] = t232;
        C[i++] = t239;
        C[i++] = t236;
        C[i++] = t181;
        C[i++] = t187;
        C[i++] = t177;
        C[i++] = t237;
        C[i++] = t190;
        C[i++] = t232;
        C[i++] = -volume*(t31+t32+t123+t124+t125+t126+t128+t129+t130+t131+t133+t135+t137+t139+mu*t13*1.2E+1+t13*t29);
        C[i++] = t247;
        C[i++] = t182;
        C[i++] = t242;
        C[i++] = t193;
        C[i++] = t183;
        C[i++] = t189;
        C[i++] = t243;
        C[i++] = t239;
        C[i++] = t247;
        C[i++] = -volume*(t31+t32+t123+t124+t125+t126+t127+t128+t129+t131+t133+t136+t138+t140+mu*t22*1.2E+1+t22*t29);
        C[i++] = t188;
        C[i++] = t194;
        C[i++] = t245;
        C[i++] = t235;
        C[i++] = t180;
        C[i++] = t186;
        C[i++] = t236;
        C[i++] = t182;
        C[i++] = t188;
        C[i++] = -volume*(t31+t32+t123+t124+t126+t127+t128+t129+t130+t131+t132+t133+t137+t140+mu*t7*1.2E+1+t7*t29);
        C[i++] = t233;
        C[i++] = t241;
        C[i++] = t179;
        C[i++] = t240;
        C[i++] = t192;
        C[i++] = t181;
        C[i++] = t242;
        C[i++] = t194;
        C[i++] = t233;
        C[i++] = -volume*(t31+t32+t123+t124+t125+t126+t127+t129+t130+t131+t134+t135+t136+t140+mu*t16*1.2E+1+t16*t29);
        C[i++] = t248;
        C[i++] = t185;
        C[i++] = t191;
        C[i++] = t244;
        C[i++] = t187;
        C[i++] = t193;
        C[i++] = t245;
        C[i++] = t241;
        C[i++] = t248;
        C[i++] = -volume*(t31+t32+t123+t124+t125+t126+t127+t128+t129+t130+t134+t137+t138+t139+mu*t25*1.2E+1+t25*t29);
        j -= 9;
        dpsidF[j++] = -volume*(F1_1*lambda*-6.0-F1_1*mu*4.0+F2_2*t74+F2_3*t77+F3_2*t83+F3_3*t87+F1_1*t124+F1_1*t125+F1_1*t126+F1_1*t127+F1_1*t128+F1_1*t129+F1_1*t130+F1_1*t131+F1_1*t133+F1_1*t134+F1_1*t135+F1_1*t138+lambda*t3*2.0+t3*t30);
        dpsidF[j++] = -volume*(F2_1*lambda*-6.0-F2_1*mu*4.0+F2_2*t69+F2_3*t70+F3_2*t95+F3_3*t98+F2_1*t123+F2_1*t124+F2_1*t125+F2_1*t127+F2_1*t128+F2_1*t129+F2_1*t130+F2_1*t131+F2_1*t132+F2_1*t136+F2_1*t137+F2_1*t138+lambda*t12*2.0+t12*t30);
        dpsidF[j++] = -volume*(F3_1*lambda*-6.0-F3_1*mu*4.0+F3_2*t69+F3_3*t70+F3_2*t84+F3_3*t88+F3_1*t123+F3_1*t124+F3_1*t125+F3_1*t126+F3_1*t127+F3_1*t128+F3_1*t130+F3_1*t131+F3_1*t132+F3_1*t135+F3_1*t139+F3_1*t140+lambda*t21*2.0+t21*t30);
        dpsidF[j++] = -volume*(F1_2*lambda*-6.0-F1_2*mu*4.0+F2_2*t72+F2_3*t79+F3_2*t81+F3_3*t90+F1_2*t123+F1_2*t125+F1_2*t126+F1_2*t127+F1_2*t128+F1_2*t129+F1_2*t130+F1_2*t131+F1_2*t132+F1_2*t134+F1_2*t136+F1_2*t139+lambda*t6*2.0+t6*t30);
        dpsidF[j++] = -volume*(F2_2*lambda*-6.0-F2_2*mu*4.0+F2_1*t69+F2_3*t71+F3_2*t93+F3_3*t100+F2_2*t123+F2_2*t124+F2_2*t125+F2_2*t126+F2_2*t128+F2_2*t129+F2_2*t130+F2_2*t131+F2_2*t133+F2_2*t135+F2_2*t137+F2_2*t139+lambda*t15*2.0+t15*t30);
        dpsidF[j++] = -volume*(F3_2*lambda*-6.0-F3_2*mu*4.0+F3_1*t69+F3_3*t71+F3_1*t84+F3_3*t91+F3_2*t123+F3_2*t124+F3_2*t125+F3_2*t126+F3_2*t127+F3_2*t128+F3_2*t129+F3_2*t131+F3_2*t133+F3_2*t136+F3_2*t138+F3_2*t140+lambda*t24*2.0+t24*t30);
        dpsidF[j++] = -volume*(F1_3*lambda*-6.0-F1_3*mu*4.0+F2_3*t72+F2_3*t76+F3_3*t81+F3_3*t86+F1_3*t123+F1_3*t124+F1_3*t126+F1_3*t127+F1_3*t128+F1_3*t129+F1_3*t130+F1_3*t131+F1_3*t132+F1_3*t133+F1_3*t137+F1_3*t140+lambda*t9*2.0+t9*t30);
        dpsidF[j++] = -volume*(F2_3*lambda*-6.0-F2_3*mu*4.0+F2_1*t70+F2_2*t71+F3_3*t93+F3_3*t97+F2_3*t123+F2_3*t124+F2_3*t125+F2_3*t126+F2_3*t127+F2_3*t129+F2_3*t130+F2_3*t131+F2_3*t134+F2_3*t135+F2_3*t136+F2_3*t140+lambda*t18*2.0+t18*t30);
        dpsidF[j++] = -volume*(F3_3*lambda*-6.0-F3_3*mu*4.0+F3_1*t70+F3_2*t71+F3_1*t88+F3_2*t91+F3_3*t123+F3_3*t124+F3_3*t125+F3_3*t126+F3_3*t127+F3_3*t128+F3_3*t129+F3_3*t130+F3_3*t134+F3_3*t137+F3_3*t138+F3_3*t139+lambda*t27*2.0+t27*t30);
  
        psi[el] = lambda*(9.0/2.0)+mu*3.0-lambda*t2*3.0-lambda*t4*3.0+(lambda*t5)/2.0-lambda*t7*3.0+(lambda*t8)/2.0+(lambda*t10)/2.0-lambda*t11*3.0-lambda*t13*3.0+(lambda*t14)/2.0-lambda*t16*3.0+(lambda*t17)/2.0+(lambda*t19)/2.0-lambda*t20*3.0-lambda*t22*3.0+(lambda*t23)/2.0-lambda*t25*3.0+(lambda*t26)/2.0+(lambda*t28)/2.0-mu*t2*2.0-mu*t4*2.0+mu*t5-mu*t7*2.0+mu*t8+mu*t10-mu*t11*2.0-mu*t13*2.0+mu*t14-mu*t16*2.0+mu*t17+mu*t19-mu*t20*2.0-mu*t22*2.0+mu*t23-mu*t25*2.0+mu*t26+mu*t28+F2_1*F2_2*t69+F2_1*F2_3*t70+F2_2*F2_3*t71+F3_1*F3_2*t69+F3_1*F3_3*t70+F3_2*F3_3*t71+F3_1*F3_2*t84+F3_1*F3_3*t88+F3_2*F3_3*t91+lambda*t2*t4+lambda*t2*t7+lambda*t4*t7+lambda*t2*t11+lambda*t2*t13+lambda*t4*t11+lambda*t4*t13+lambda*t2*t16+lambda*t7*t11+lambda*t4*t16+lambda*t7*t13+lambda*t2*t20+lambda*t7*t16+lambda*t2*t22+lambda*t4*t20+lambda*t11*t13+lambda*t4*t22+lambda*t2*t25+lambda*t7*t20+lambda*t11*t16+lambda*t4*t25+lambda*t7*t22+lambda*t13*t16+lambda*t11*t20+lambda*t7*t25+lambda*t11*t22+lambda*t13*t20+lambda*t13*t22+lambda*t11*t25+lambda*t16*t20+lambda*t13*t25+lambda*t16*t22+lambda*t16*t25+lambda*t20*t22+lambda*t20*t25+lambda*t22*t25+mu*t2*t4*2.0+mu*t2*t7*2.0+mu*t4*t7*2.0+mu*t2*t11*2.0+mu*t4*t13*2.0+mu*t2*t20*2.0+mu*t7*t16*2.0+mu*t11*t13*2.0+mu*t4*t22*2.0+mu*t11*t16*2.0+mu*t13*t16*2.0+mu*t11*t20*2.0+mu*t7*t25*2.0+mu*t13*t22*2.0+mu*t16*t25*2.0+mu*t20*t22*2.0+mu*t20*t25*2.0+mu*t22*t25*2.0;
    }
    
    // migth bet better cache performance by building these things separately
    i = 0;
    int offset = 1;
    for ( int el = 0; el < m; el++ ) {
        for ( int j = 0; j < 81; j++ ) {
            ii[i] = offset + j % 9;
            jj[i] = offset + j / 9;
            i++;
        }
        offset += 9;
    }
}
