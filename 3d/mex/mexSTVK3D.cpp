/* mexSTVK3D.cpp - computes negative area weighted STVK dpsidF and d2psidF2
 *
 * [ ii, jj, Cvals, dpsidF ] = mexSTVK3D( F, V, mu, lambda );
 *
 * Input:
 *  F        9x#E deformation gradient of each element (or a vector of size 9x#E)
 *  V        #E volume of each element
 *  mu       #E Lamé parameter of each element
 *  lambda   #E Lamé parameter of each element
 * 
 * Output:
 *  ii         81x#E by 1 row indices for each C block in a sparse matrix
 *  jj         81x#E by 1 col indices for each C block in a sparse matrix
 *  Cvals      81x#E by 1 energy Hessian wrt F for each eleemnt (scaled by negative volume)
 *  dpsidF     9x#E by 1 energy gradient (scaled by negative volume)
 *
 * To compile type: mex -R2018a mexSTVK3D.cpp
 *
 * Notes:
 *
 * Code generated by scratch/codeGenSTVKHessian3D.m
 *
 * It is perhaps a tiny bit slower to build the sparse matrix with the 
 * matlab call sparse( ii, jj, Cvals ), rather than creating it here, but 
 * it could also be more useful in the long run to have the non-sparse 
 * version of the Cvals (e.g., a custom non-assembled matrix multiply for
 * the quick solve conjugate gradient).
 *========================================================*/

#include "mex.h"
#include "blas.h"

/* 
 * The gateway function
 */
void mexFunction( int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[] ) {
    // check for proper number of arguments
    if ( nrhs != 4 ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:nrhs","four inputs required.");
    }
    if ( nlhs != 5 ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:nlhs","five outputs required.");
    }
    
    // make sure the arguments are dense real double
    if ( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) || mxIsSparse(prhs[0]) ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
    if ( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) || mxIsSparse(prhs[1]) ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
    if ( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) || mxIsSparse(prhs[2]) ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:mustBeDenseRealDouble","Parameters must be dense real double.");
    }
    if ( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) || mxIsSparse(prhs[3]) ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:mustBeDenseRealDouble","Parameters must be dense real double.");
    }

    // check sizes    
    size_t Fsize = mxGetNumberOfElements(prhs[0]); // number of rows 
    if ( Fsize % 9 != 0 ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:FSize","F must be a multiple of 9.");
    }
    size_t m = Fsize / 9;
    if ( mxGetNumberOfElements(prhs[1]) != m || mxGetNumberOfElements(prhs[2]) != m || mxGetNumberOfElements(prhs[3]) != m ) {
        mexErrMsgIdAndTxt("ARP:mexSTVK3D:RowSize","All inputs must have same number of rows.");
    }
     
    double *FVals = mxGetDoubles(prhs[0]);
    double *VVals = mxGetDoubles(prhs[1]);
    double *muVals = mxGetDoubles(prhs[2]);
    double *lambdaVals = mxGetDoubles(prhs[3]);
    
    // create the output vectors 
    plhs[0] = mxCreateDoubleMatrix( 81*m, 1, mxREAL );
    double *ii = mxGetDoubles(plhs[0]);
    plhs[1] = mxCreateDoubleMatrix( 81*m, 1, mxREAL );
    double *jj = mxGetDoubles(plhs[1]);
    plhs[2] = mxCreateDoubleMatrix( 81*m, 1, mxREAL );
    double *C = mxGetDoubles(plhs[2]);
    plhs[3] = mxCreateDoubleMatrix( 9*m, 1, mxREAL );
    double *dpsidF = mxGetDoubles(plhs[3]);
    plhs[4] = mxCreateDoubleMatrix( m, 1, mxREAL );
    double *psi = mxGetDoubles(plhs[4]);
    
    size_t i = 0;
    size_t j = 0;
    for ( int el = 0; el < m; el++ ) {
        double volume = VVals[el];
        double mu = muVals[el];
        double lambda = lambdaVals[el];
        double F1_1 = FVals[j++];
        double F2_1 = FVals[j++];
        double F3_1 = FVals[j++];
        double F1_2 = FVals[j++];
        double F2_2 = FVals[j++];
        double F3_2 = FVals[j++];
        double F1_3 = FVals[j++];
        double F2_3 = FVals[j++];
        double F3_3 = FVals[j++];
        
        // code gen from scratch/codeGenSTVKHessian3D.m
        double t2 = F1_1*F1_1;
        double t3 = F1_2*F1_2;
        double t4 = F1_3*F1_3;
        double t5 = F2_1*F2_1;
        double t6 = F2_2*F2_2;
        double t7 = F2_3*F2_3;
        double t8 = F3_1*F3_1;
        double t9 = F3_2*F3_2;
        double t10 = F3_3*F3_3;
        double t11 = F1_1*F1_2;
        double t12 = F1_1*F1_3;
        double t13 = F1_2*F1_3;
        double t14 = F1_1*F2_1;
        double t15 = F1_2*F2_2;
        double t16 = F1_3*F2_3;
        double t17 = F1_1*F3_1;
        double t18 = F2_1*F2_2;
        double t19 = F1_2*F3_2;
        double t20 = F2_1*F2_3;
        double t21 = F2_2*F2_3;
        double t22 = F1_3*F3_3;
        double t23 = F2_1*F3_1;
        double t24 = F2_2*F3_2;
        double t25 = F2_3*F3_3;
        double t26 = F3_1*F3_2;
        double t27 = F3_1*F3_3;
        double t28 = F3_2*F3_3;
        double t33 = F1_1*F2_2*lambda;
        double t34 = F1_2*F2_1*lambda;
        double t35 = F1_1*F2_3*lambda;
        double t37 = F1_3*F2_1*lambda;
        double t38 = F1_2*F2_3*lambda;
        double t39 = F1_3*F2_2*lambda;
        double t42 = F1_1*F3_2*lambda;
        double t43 = F1_2*F3_1*lambda;
        double t45 = F1_1*F3_3*lambda;
        double t47 = F1_3*F3_1*lambda;
        double t49 = F1_2*F3_3*lambda;
        double t50 = F1_3*F3_2*lambda;
        double t54 = F2_1*F3_2*lambda;
        double t55 = F2_2*F3_1*lambda;
        double t56 = F2_1*F3_3*lambda;
        double t58 = F2_3*F3_1*lambda;
        double t59 = F2_2*F3_3*lambda;
        double t60 = F2_3*F3_2*lambda;
        double t65 = F1_1*F2_2*mu;
        double t66 = F1_2*F2_1*mu;
        double t67 = F1_1*F2_3*mu;
        double t68 = F1_3*F2_1*mu;
        double t69 = F1_2*F2_3*mu;
        double t70 = F1_3*F2_2*mu;
        double t71 = F1_1*F3_2*mu;
        double t72 = F1_2*F3_1*mu;
        double t73 = F1_1*F3_3*mu;
        double t74 = F1_3*F3_1*mu;
        double t75 = F1_2*F3_3*mu;
        double t76 = F1_3*F3_2*mu;
        double t77 = F2_1*F3_2*mu;
        double t78 = F2_2*F3_1*mu;
        double t79 = F2_1*F3_3*mu;
        double t80 = F2_3*F3_1*mu;
        double t81 = F2_2*F3_3*mu;
        double t82 = F2_3*F3_2*mu;
        double t29 = lambda*t11;
        double t30 = lambda*t12;
        double t31 = lambda*t13;
        double t32 = lambda*t14;
        double t36 = lambda*t15;
        double t40 = lambda*t16;
        double t41 = lambda*t17;
        double t44 = lambda*t18;
        double t46 = lambda*t19;
        double t48 = lambda*t20;
        double t51 = lambda*t21;
        double t52 = lambda*t22;
        double t53 = lambda*t23;
        double t57 = lambda*t24;
        double t61 = lambda*t25;
        double t62 = lambda*t26;
        double t63 = lambda*t27;
        double t64 = lambda*t28;
        double t83 = t11*2.0;
        double t84 = t12*2.0;
        double t85 = t13*2.0;
        double t86 = t14*2.0;
        double t87 = t15*2.0;
        double t88 = t16*2.0;
        double t89 = t17*2.0;
        double t90 = t18*2.0;
        double t91 = t19*2.0;
        double t92 = t20*2.0;
        double t93 = t21*2.0;
        double t94 = t22*2.0;
        double t95 = t23*2.0;
        double t96 = t24*2.0;
        double t97 = t25*2.0;
        double t98 = t26*2.0;
        double t99 = t27*2.0;
        double t100 = t28*2.0;
        double t101 = t11/2.0;
        double t102 = t12/2.0;
        double t103 = t13/2.0;
        double t104 = t18/2.0;
        double t105 = t20/2.0;
        double t106 = t21/2.0;
        double t107 = t26/2.0;
        double t108 = t27/2.0;
        double t109 = t28/2.0;
        double t110 = t2/2.0;
        double t111 = t3/2.0;
        double t112 = t4/2.0;
        double t113 = t5/2.0;
        double t114 = t6/2.0;
        double t115 = t7/2.0;
        double t116 = t8/2.0;
        double t117 = t9/2.0;
        double t118 = t10/2.0;
        double t119 = t33+t66;
        double t120 = t34+t65;
        double t121 = t35+t68;
        double t122 = t37+t67;
        double t123 = t38+t70;
        double t124 = t39+t69;
        double t125 = t42+t72;
        double t126 = t43+t71;
        double t127 = t45+t74;
        double t128 = t47+t73;
        double t129 = t49+t76;
        double t130 = t50+t75;
        double t131 = t54+t78;
        double t132 = t55+t77;
        double t133 = t56+t80;
        double t134 = t58+t79;
        double t135 = t59+t82;
        double t136 = t60+t81;
        double t137 = t14+t15+t88;
        double t138 = t14+t16+t87;
        double t139 = t15+t16+t86;
        double t140 = t11+t18+t98;
        double t141 = t11+t26+t90;
        double t142 = t18+t26+t83;
        double t143 = t12+t20+t99;
        double t144 = t12+t27+t92;
        double t145 = t17+t19+t94;
        double t146 = t17+t22+t91;
        double t147 = t20+t27+t84;
        double t148 = t19+t22+t89;
        double t149 = t13+t21+t100;
        double t150 = t13+t28+t93;
        double t151 = t21+t28+t85;
        double t152 = t23+t24+t97;
        double t153 = t23+t25+t96;
        double t154 = t24+t25+t95;
        double t155 = t119*volume;
        double t156 = t120*volume;
        double t157 = t121*volume;
        double t158 = t122*volume;
        double t159 = t123*volume;
        double t160 = t124*volume;
        double t161 = t125*volume;
        double t162 = t126*volume;
        double t163 = t127*volume;
        double t164 = t128*volume;
        double t165 = t129*volume;
        double t166 = t130*volume;
        double t167 = t131*volume;
        double t168 = t132*volume;
        double t169 = t133*volume;
        double t170 = t134*volume;
        double t171 = t135*volume;
        double t172 = t136*volume;
        double t227 = t101+t104+t107;
        double t228 = t102+t105+t108;
        double t229 = t103+t106+t109;
        double t266 = t110+t113+t116-1.0/2.0;
        double t267 = t111+t114+t117-1.0/2.0;
        double t268 = t112+t115+t118-1.0/2.0;
        double t269 = t110+t111+t112+t113+t114+t115+t116+t117+t118-3.0/2.0;
        double t173 = -t155;
        double t174 = -t156;
        double t175 = -t157;
        double t176 = -t158;
        double t177 = -t159;
        double t178 = -t160;
        double t179 = -t161;
        double t180 = -t162;
        double t181 = -t163;
        double t182 = -t164;
        double t183 = -t165;
        double t184 = -t166;
        double t185 = -t167;
        double t186 = -t168;
        double t187 = -t169;
        double t188 = -t170;
        double t189 = -t171;
        double t190 = -t172;
        double t191 = mu*t137;
        double t192 = mu*t138;
        double t193 = mu*t139;
        double t194 = mu*t140;
        double t195 = mu*t141;
        double t196 = mu*t142;
        double t197 = mu*t143;
        double t198 = mu*t144;
        double t199 = mu*t145;
        double t200 = mu*t146;
        double t201 = mu*t147;
        double t202 = mu*t148;
        double t203 = mu*t149;
        double t204 = mu*t150;
        double t205 = mu*t151;
        double t206 = mu*t152;
        double t207 = mu*t153;
        double t208 = mu*t154;
        double t270 = lambda*t269;
        double t209 = t32+t193;
        double t210 = t36+t192;
        double t211 = t40+t191;
        double t212 = t29+t196;
        double t213 = t30+t201;
        double t214 = t31+t205;
        double t215 = t44+t195;
        double t216 = t41+t202;
        double t217 = t48+t198;
        double t218 = t46+t200;
        double t219 = t52+t199;
        double t220 = t51+t204;
        double t221 = t62+t194;
        double t222 = t63+t197;
        double t223 = t64+t203;
        double t224 = t53+t208;
        double t225 = t57+t207;
        double t226 = t61+t206;
        double t230 = t209*volume;
        double t231 = t210*volume;
        double t232 = t211*volume;
        double t233 = t212*volume;
        double t234 = t213*volume;
        double t235 = t214*volume;
        double t236 = t215*volume;
        double t237 = t216*volume;
        double t238 = t217*volume;
        double t239 = t218*volume;
        double t240 = t219*volume;
        double t241 = t220*volume;
        double t242 = t221*volume;
        double t243 = t222*volume;
        double t244 = t223*volume;
        double t245 = t224*volume;
        double t246 = t225*volume;
        double t247 = t226*volume;
        double t248 = -t230;
        double t249 = -t231;
        double t250 = -t232;
        double t251 = -t233;
        double t252 = -t234;
        double t253 = -t235;
        double t254 = -t236;
        double t255 = -t237;
        double t256 = -t238;
        double t257 = -t239;
        double t258 = -t240;
        double t259 = -t241;
        double t260 = -t242;
        double t261 = -t243;
        double t262 = -t244;
        double t263 = -t245;
        double t264 = -t246;
        double t265 = -t247;

        C[i++] = -volume*(t270+lambda*t2+mu*(t2*3.0+t3+t4+t5+t8-1.0));
        C[i++] = t248;
        C[i++] = t255;
        C[i++] = t251;
        C[i++] = t173;
        C[i++] = t179;
        C[i++] = t252;
        C[i++] = t175;
        C[i++] = t181;
        C[i++] = t248;
        C[i++] = -volume*(t270+lambda*t5+mu*(t2+t5*3.0+t6+t7+t8-1.0));
        C[i++] = t263;
        C[i++] = t174;
        C[i++] = t254;
        C[i++] = t185;
        C[i++] = t176;
        C[i++] = t256;
        C[i++] = t187;
        C[i++] = t255;
        C[i++] = t263;
        C[i++] = -volume*(t270+lambda*t8+mu*(t2+t5+t8*3.0+t9+t10-1.0));
        C[i++] = t180;
        C[i++] = t186;
        C[i++] = t260;
        C[i++] = t182;
        C[i++] = t188;
        C[i++] = t261;
        C[i++] = t251;
        C[i++] = t174;
        C[i++] = t180;
        C[i++] = -volume*(t270+lambda*t3+mu*(t2+t3*3.0+t4+t6+t9-1.0));
        C[i++] = t249;
        C[i++] = t257;
        C[i++] = t253;
        C[i++] = t177;
        C[i++] = t183;
        C[i++] = t173;
        C[i++] = t254;
        C[i++] = t186;
        C[i++] = t249;
        C[i++] = -volume*(t270+lambda*t6+mu*(t3+t5+t6*3.0+t7+t9-1.0));
        C[i++] = t264;
        C[i++] = t178;
        C[i++] = t259;
        C[i++] = t189;
        C[i++] = t179;
        C[i++] = t185;
        C[i++] = t260;
        C[i++] = t257;
        C[i++] = t264;
        C[i++] = -volume*(t270+lambda*t9+mu*(t3+t6+t8+t9*3.0+t10-1.0));
        C[i++] = t184;
        C[i++] = t190;
        C[i++] = t262;
        C[i++] = t252;
        C[i++] = t176;
        C[i++] = t182;
        C[i++] = t253;
        C[i++] = t178;
        C[i++] = t184;
        C[i++] = -volume*(t270+lambda*t4+mu*(t2+t3+t4*3.0+t7+t10-1.0));
        C[i++] = t250;
        C[i++] = t258;
        C[i++] = t175;
        C[i++] = t256;
        C[i++] = t188;
        C[i++] = t177;
        C[i++] = t259;
        C[i++] = t190;
        C[i++] = t250;
        C[i++] = -volume*(t270+lambda*t7+mu*(t4+t5+t6+t7*3.0+t10-1.0));
        C[i++] = t265;
        C[i++] = t181;
        C[i++] = t187;
        C[i++] = t261;
        C[i++] = t183;
        C[i++] = t189;
        C[i++] = t262;
        C[i++] = t258;
        C[i++] = t265;
        C[i++] = -volume*(t270+lambda*t10+mu*(t4+t7+t8+t9+t10*3.0-1.0));
        j -= 9;
        dpsidF[j++] = -volume*(F1_1*t270+mu*(F1_2*t227*2.0+F1_3*t228*2.0+F1_1*t266*2.0));
        dpsidF[j++] = -volume*(F2_1*t270+mu*(F2_2*t227*2.0+F2_3*t228*2.0+F2_1*t266*2.0));
        dpsidF[j++] = -volume*(F3_1*t270+mu*(F3_2*t227*2.0+F3_3*t228*2.0+F3_1*t266*2.0));
        dpsidF[j++] = -volume*(F1_2*t270+mu*(F1_1*t227*2.0+F1_3*t229*2.0+F1_2*t267*2.0));
        dpsidF[j++] = -volume*(F2_2*t270+mu*(F2_1*t227*2.0+F2_3*t229*2.0+F2_2*t267*2.0));
        dpsidF[j++] = -volume*(F3_2*t270+mu*(F3_1*t227*2.0+F3_3*t229*2.0+F3_2*t267*2.0));
        dpsidF[j++] = -volume*(F1_3*t270+mu*(F1_1*t228*2.0+F1_2*t229*2.0+F1_3*t268*2.0));
        dpsidF[j++] = -volume*(F2_3*t270+mu*(F2_1*t228*2.0+F2_2*t229*2.0+F2_3*t268*2.0));
        dpsidF[j++] = -volume*(F3_3*t270+mu*(F3_1*t228*2.0+F3_2*t229*2.0+F3_3*t268*2.0));
        
        psi[el] = mu*((t227*t227)*2.0+(t228*t228)*2.0+(t229*t229)*2.0+t266*t266+t267*t267+t268*t268)+(t269*t270)/2.0;
    }
    
    // migth be better to cache by building these things separately
    i = 0;
    int offset = 1;
    for ( int el = 0; el < m; el++ ) {
        for ( int j = 0; j < 81; j++ ) {
            ii[i] = offset + j % 9;
            jj[i] = offset + j / 9;
            i++;
        }
        offset += 9;
    }
}
